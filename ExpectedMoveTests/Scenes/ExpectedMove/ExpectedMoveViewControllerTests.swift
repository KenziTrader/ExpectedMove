//
//  ExpectedMoveViewControllerTests.swift
//  ExpectedMove
//
//  Created by Rene Laterveer on 6/8/16.
//  Copyright (c) 2016 Rene Laterveer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import ExpectedMove
import XCTest

class ExpectedMoveViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ExpectedMoveViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupExpectedMoveViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupExpectedMoveViewController()
    {
        let bundle = NSBundle.mainBundle()
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewControllerWithIdentifier("ExpectedMoveViewController") as! ExpectedMoveViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        NSRunLoop.currentRunLoop().runUntilDate(NSDate())
    }
    
    func tickerTextFieldDidEndEditing()
    {
       sut.tickerTextField.delegate?.textFieldDidEndEditing?(sut.tickerTextField)
    }
    
    // MARK: Test doubles
    
    class ExpectedMoveViewControllerOutputSpy: ExpectedMoveViewControllerOutput
    {
        // MARK: Method call expectations
        var fetchTickerCalled = false
        
        // MARK: Spied methods
        func fetchTicker(request: ExpectedMove.FetchTicker.Request)
        {
            fetchTickerCalled = true
        }
    }
    
    // MARK: Tests
    
    func testTickerTextFieldHasExpectedMoveViewControllerAsDelegate()
    {
        // Given
        
        // When
        loadView()
        let delegate = sut.tickerTextField.delegate
//        let expectedMoveViewControllerIsDelegate = delegate? == (sut as UITextFieldDelegate)
        
        // Then
        XCTAssert(delegate != nil, "Ticker text field should have a delegate")
    }

    func testFetchTickerCalledWhenTickerTextFieldDidEndEditing()
    {
        // Given
        let expectedMoveViewControllerOutputSpy = ExpectedMoveViewControllerOutputSpy()
        sut.output = expectedMoveViewControllerOutputSpy
        
        // When
        loadView()
        tickerTextFieldDidEndEditing()
        
        // Then
        XCTAssert(expectedMoveViewControllerOutputSpy.fetchTickerCalled, "Should fetch ticker when ticker text field ends editing")
    }
}
