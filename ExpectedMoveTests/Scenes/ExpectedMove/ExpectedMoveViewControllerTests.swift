//
//  ExpectedMoveViewControllerTests.swift
//  ExpectedMove
//
//  Created by Rene Laterveer on 6/8/16.
//  Copyright (c) 2016 Rene Laterveer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import ExpectedMove
import XCTest

class ExpectedMoveViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ExpectedMoveViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupExpectedMoveViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupExpectedMoveViewController()
    {
        let bundle = NSBundle.mainBundle()
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewControllerWithIdentifier("ExpectedMoveViewController") as! ExpectedMoveViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        NSRunLoop.currentRunLoop().runUntilDate(NSDate())
    }
    
    func tickerTextFieldDidEndEditing()
    {
       sut.tickerTextField.delegate?.textFieldDidEndEditing?(sut.tickerTextField)
    }
    
    // MARK: Test doubles
    
    class ExpectedMoveViewControllerOutputSpy: ExpectedMoveViewControllerOutput
    {
        // MARK: Method call expectations

        var fetchTickerCalled = false
        var autoCompleteCalled = false
        
        // MARK: Spied methods

        func fetchTicker(request: ExpectedMove.FetchTicker.Request)
        {
            fetchTickerCalled = true
        }
        
        func autoComplete(request: ExpectedMove.AutoComplete.Request) {
            autoCompleteCalled = true
        }
    }
    
    func sampleviewModel(price: String, profits: [String]) -> ExpectedMove.FetchTicker.ViewModel
    {
        var viewModel = ExpectedMove.FetchTicker.ViewModel()

        viewModel.price = price
        
        var profitLosses: [ExpectedMove.FetchTicker.DisplayedProfitLoss] = []
        for profit in profits {
            let displayedProfitLoss = ExpectedMove.FetchTicker.DisplayedProfitLoss(
                ndays: 1, loss: "-"+profit, profit: "+"+profit)
            profitLosses.append(displayedProfitLoss)
        }
        
        viewModel.expectedProfitLossDaysAhead = profitLosses

        return viewModel
    }
    
    // MARK: Tests
    
    func testFetchTickerCalledWhenCalculateButtonTapped()
    {
        // Given
        let expectedMoveViewControllerOutputSpy = ExpectedMoveViewControllerOutputSpy()
        sut.output = expectedMoveViewControllerOutputSpy
        
        // When
        loadView()
        sut.calculateButtonTapped()
        
        // Then
        XCTAssert(expectedMoveViewControllerOutputSpy.fetchTickerCalled, "Should fetch ticker when ticker calculate button tapped")
    }
    
    func testShouldConfigurePriceTextField()
    {
        // Given
        let price = "99.80"
        let pls = ["103", "145", "178", "272"]
        let viewModel = sampleviewModel(price, profits: pls)
        
        // When
        loadView()
        sut.displayProfitLossDaysAhead(viewModel)
        let displayedPrice = sut.displayedPriceLabel.text
        
        // Then
        XCTAssertEqual(displayedPrice, price, "View controller should set the price label")
        var tag = 0
        for profit in pls {
            XCTAssertEqual(sut.profitLosslabels[tag].text, "-"+profit, "View controller should set the loss label")
            tag += 1
            XCTAssertEqual(sut.profitLosslabels[tag].text, "+"+profit, "View controller should set the profit label")
            tag += 1
       }
    }
    
    func testAutoCompleteCalledWhenTickerFieldChanges()
    {
        // Given
        let expectedMoveViewControllerOutputSpy = ExpectedMoveViewControllerOutputSpy()
        sut.output = expectedMoveViewControllerOutputSpy
        let replacementString = "AAP"
        let range = NSRange(location: 0, length: replacementString.characters.count)
        
        // When
        loadView()
        let textField = sut.tickerTextField
        textField.delegate?.textField?(textField, shouldChangeCharactersInRange: range, replacementString: replacementString)
        
        // Then
        XCTAssert(expectedMoveViewControllerOutputSpy.autoCompleteCalled, "Should call auto complete when ticker text field changes")
    }
    

}
