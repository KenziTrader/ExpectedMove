//
//  ExpectedMoveInteractorTests.swift
//  ExpectedMove
//
//  Created by Rene Laterveer on 6/8/16.
//  Copyright (c) 2016 Rene Laterveer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import ExpectedMove
import XCTest

class ExpectedMoveInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: ExpectedMoveInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupExpectedMoveInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupExpectedMoveInteractor()
    {
        sut = ExpectedMoveInteractor()
    }
    
    // MARK: Test doubles
    
    class ExpectedMoveInteractorOutputSpy: ExpectedMoveInteractorOutput
    {
        // MARK: Method call expectations
        var presentProfitLossDaysAheadCalled = false
        var presentStockAutoCompleteCalled = false
        
        // MARK: Spied methods
        func presentProfitLossDaysAhead(response: ExpectedMove.FetchTicker.Response)
        {
            presentProfitLossDaysAheadCalled = true
        }
        
        func setNetworkActivityIndicatorVisible(visible: Bool) {
        }
        
        func presentStockAutoComplete(response: ExpectedMove.AutoComplete.Response) {
            presentStockAutoCompleteCalled = true
        }
    }
    
    class FetchTickerWorkerSpy: FetchTickerWorker
    {
        // MARK: Method call expectations
        var fetchTickerCalled = false
        
        // MARK: Spied methods
        override func fetchTicker(ticker: String, completionHandler: (financeData: FinanceData) -> Void)
        {
            fetchTickerCalled = true
            financeDataService.fetchTicker(ticker, completionHandler: completionHandler)
        }
        
    }
    
    class CalculateExpectedMoveWorkerSpy: CalculateExpectedMoveWorker
    {
        // MARK: Method call expectations
        var calculateCalled = false
        
        // MARK: Spied methods
        override func calculate(price: Double, numberOfShares: Int, impliedVolatility: Double) -> [ProfitLoss] {
            calculateCalled = true
            return [ProfitLoss]()
        }
    }
    
    class FinanceDataMock: FinanceDataProtocol
    {
        func fetchTicker(ticker: String, completionHandler: (financeData: FinanceData) -> Void)
        {
            var financeData = FinanceData()
            financeData.lastTradePrice = 100.0
            completionHandler(financeData: financeData)
        }
    }
    
    class AutoCompleteWorkerSpy: StockAutoCompleteWorker
    {
        // MARK: Method call expectations
        var autoCompleteCalled = false
        
        // MARK: Spied methods
        override func stockAutoComplete(ticker: String, completionHandler: (stockAutoComplete: [StockAutoCompleteResult]) -> Void) {
            autoCompleteCalled = true
            stockAutoCompleteService.stockAutoComplete(ticker, completionHandler: completionHandler)
        }
    }
    
    class StockAutoCompleteAPIMock: StockAutoCompleteAPI
    {
        override func stockAutoComplete(ticker: String, completionHandler: (stockAutoComplete: [StockAutoCompleteResult]) -> Void) {
            let stockAutoCompleteResultArray = [StockAutoCompleteResult]()
            completionHandler(stockAutoComplete: stockAutoCompleteResultArray)
        }
    }
    
    // MARK: Tests
    
    func testFetchTickerShouldAskExpectedMoveWorkerToFetchTicker()
    {
        // Given
        let expectedMoveInteractorOutputSpy = ExpectedMoveInteractorOutputSpy()
        sut.output = expectedMoveInteractorOutputSpy
        let workerSpy = FetchTickerWorkerSpy(financeDataService: FinanceDataMock())
        sut.fetchTickerWorker = workerSpy
        var request = ExpectedMove.FetchTicker.Request()
        request.ticker = "AAPL"
        request.numberOfShares = "100"
        request.impliedVolatility = "0.182"
        
        // When
        sut.fetchTicker(request)
        
        // Then
        XCTAssert(workerSpy.fetchTickerCalled, "FetchTicker() should ask worker to fetch ticker data")
    }
    
    func testFetchTickerShouldAskCalculateExpectedMoveWorkerToCalculateExpectedMove()
    {
        // Given
        let expectedMoveInteractorOutputSpy = ExpectedMoveInteractorOutputSpy()
        sut.output = expectedMoveInteractorOutputSpy
        let fetchTickerWorkerSpy = FetchTickerWorkerSpy(financeDataService: FinanceDataMock())
        sut.fetchTickerWorker = fetchTickerWorkerSpy
        let calculateExpectedMoveWorkerSpy = CalculateExpectedMoveWorkerSpy()
        sut.calculateExpectedMoveWorker = calculateExpectedMoveWorkerSpy
        var request = ExpectedMove.FetchTicker.Request()
        request.ticker = "AAPL"
        request.numberOfShares = "100"
        request.impliedVolatility = "0.182"
        
        // When
        sut.fetchTicker(request)
        
        // Then
        XCTAssert(calculateExpectedMoveWorkerSpy.calculateCalled, "FetchTicker() should ask worker to calculate expected move")
    }
    
    func testFetchTickerShouldAskPresenterToFormatResult()
    {
        // Given
        let expectedMoveInteractorOutputSpy = ExpectedMoveInteractorOutputSpy()
        sut.output = expectedMoveInteractorOutputSpy
        let workerSpy = FetchTickerWorkerSpy(financeDataService: FinanceDataMock())
        sut.fetchTickerWorker = workerSpy
        var request = ExpectedMove.FetchTicker.Request()
        request.ticker = "AAPL"
        request.numberOfShares = "100"
        request.impliedVolatility = "0.182"
        
        // When
        sut.fetchTicker(request)
        
        // Then
        XCTAssert(expectedMoveInteractorOutputSpy.presentProfitLossDaysAheadCalled, "FetchTicker() should ask presenter to format expected move result")
    }
    
    func testAutoCompleteShouldAskStockAutoCompleteWorkerToAutoComplete()
    {
        // Given
        let expectedMoveInteractorOutputSpy = ExpectedMoveInteractorOutputSpy()
        sut.output = expectedMoveInteractorOutputSpy
        let autoCompleteWorkerSpy = AutoCompleteWorkerSpy(stockAutoCompleteService: StockAutoCompleteAPI())
        sut.autoCompleteWorker = autoCompleteWorkerSpy
        var request = ExpectedMove.AutoComplete.Request()
        request.ticker = "AAP"
        
        // When
        sut.autoComplete(request)
        
        // Then
        XCTAssert(autoCompleteWorkerSpy.autoCompleteCalled, "AutoComplete() should ask worker to auto complete ticker")
    }

    func testAutoCompleteShouldAskPresenterToFormatResult()
    {
        // Given
        let expectedMoveInteractorOutputSpy = ExpectedMoveInteractorOutputSpy()
        sut.output = expectedMoveInteractorOutputSpy
        let autoCompleteWorkerSpy = AutoCompleteWorkerSpy(stockAutoCompleteService: StockAutoCompleteAPIMock())
        sut.autoCompleteWorker = autoCompleteWorkerSpy
        var request = ExpectedMove.AutoComplete.Request()
        request.ticker = "AAP"
        
        // When
        sut.autoComplete(request)
        
        // Then
        XCTAssert(expectedMoveInteractorOutputSpy.presentStockAutoCompleteCalled, "AutoComplete() should ask presenter to format auto complete result")
    }

}
