//
//  ExpectedMoveViewController.swift
//  ExpectedMove
//
//  Created by Rene Laterveer on 6/8/16.
//  Copyright (c) 2016 Rene Laterveer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ExpectedMoveViewControllerInput
{
    func displayProfitLossDaysAhead(viewModel: ExpectedMove.FetchTicker.ViewModel)
    func setNetworkActivityIndicatorVisible(visible: Bool)
}

protocol ExpectedMoveViewControllerOutput
{
    func fetchTicker(request: ExpectedMove.FetchTicker.Request)
}

class ExpectedMoveViewController: UITableViewController, ExpectedMoveViewControllerInput
{
    var output: ExpectedMoveViewControllerOutput!
    var router: ExpectedMoveRouter!
    
    // MARK: Outlets
    
    @IBOutlet weak var tickerTextField: UITextField!
    @IBOutlet weak var numberOfSharesTextField: UITextField!
    @IBOutlet weak var impliedVolatilityTextField: UITextField!
    @IBOutlet weak var displayedPriceLabel: UILabel!
    @IBOutlet var profitLosslabels: [UILabel]!
    @IBOutlet weak var calculateButton: UIButton!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ExpectedMoveConfigurator.sharedInstance.configure(self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomethingOnLoad()
    }
    
    // MARK: Actions

    @IBAction func calculateButtonTapped() {
        let request = ExpectedMove.FetchTicker.Request(
            ticker: tickerTextField.text!,
            numberOfShares: numberOfSharesTextField.text!,
            impliedVolatility: impliedVolatilityTextField.text!)
        output.fetchTicker(request)
    }
    
    // MARK: Event handling
    
    func doSomethingOnLoad()
    {
        // NOTE: Ask the Interactor to do some work
    }
    
    // MARK: Display logic
    
    func displayProfitLossDaysAhead(viewModel: ExpectedMove.FetchTicker.ViewModel)
    {
        // NOTE: Display the result from the Presenter
        
        displayedPriceLabel.text = viewModel.price
        var tag = 0
        for profitLoss in viewModel.expectedProfitLossDaysAhead {
            profitLosslabels[tag].text = profitLoss.loss
            tag += 1
            profitLosslabels[tag].text = profitLoss.profit
            tag += 1
        }
    }
    
    private var numberOfTimesNetworkActivityIndicatorSetToVisible = 0
    func setNetworkActivityIndicatorVisible(visible: Bool) {
        if visible {
            numberOfTimesNetworkActivityIndicatorSetToVisible += 1
        } else {
            numberOfTimesNetworkActivityIndicatorSetToVisible -= 1
        }
        assert(numberOfTimesNetworkActivityIndicatorSetToVisible >= 0 ,
               "Network activity indicator was asked to hide more often than shown")
        UIApplication.sharedApplication().networkActivityIndicatorVisible = visible
    }

    func enableOrDisableCalculateButton() {
        if let ticker = tickerTextField.text,
            let numberOfShares = numberOfSharesTextField.text,
            let impliedVolatility = impliedVolatilityTextField.text
            where ticker != "" && numberOfShares != "" && impliedVolatility != ""
        {
            calculateButton.enabled = true
        } else {
            calculateButton.enabled = false
        }
    }
}

extension ExpectedMoveViewController: UITextFieldDelegate
{
    func textFieldDidEndEditing(textField: UITextField) {
        enableOrDisableCalculateButton()
    }
    
    func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool {
        enableOrDisableCalculateButton()
        return true
    }
}
