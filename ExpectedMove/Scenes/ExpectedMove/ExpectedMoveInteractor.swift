//
//  ExpectedMoveInteractor.swift
//  ExpectedMove
//
//  Created by Rene Laterveer on 6/8/16.
//  Copyright (c) 2016 Rene Laterveer. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ExpectedMoveInteractorInput
{
    func fetchTicker(request: ExpectedMove.FetchTicker.Request)
    func autoComplete(request: ExpectedMove.AutoComplete.Request)
}

protocol ExpectedMoveInteractorOutput
{
    func presentProfitLossDaysAhead(response: ExpectedMove.FetchTicker.Response)
    func setNetworkActivityIndicatorVisible(visible: Bool)
    func presentStockAutoComplete(response: ExpectedMove.AutoComplete.Response)
}

class ExpectedMoveInteractor: ExpectedMoveInteractorInput
{
    var output: ExpectedMoveInteractorOutput!
    var fetchTickerWorker = FetchTickerWorker(financeDataService: FinanceDataAPI())
    var calculateExpectedMoveWorker = CalculateExpectedMoveWorker()
    var autoCompleteWorker = StockAutoCompleteWorker(stockAutoCompleteService: StockAutoCompleteAPI())
    
    // MARK: Business logic
    
    func fetchTicker(request: ExpectedMove.FetchTicker.Request)
    {
        let ticker = request.ticker
        if
            let numberOfShares = request.numberOfShares.asInt(),
            let impliedVolatility = request.impliedVolatility.asDouble()
        {
            
            // NOTE: Ask the Worker to do the work
            
            fetchTickerWorker.fetchTicker(ticker) {
                financeData in
                
                self.output.setNetworkActivityIndicatorVisible(false)
                if let price = financeData.lastTradePrice {
                    
                    let profitLoss =
                        self.calculateExpectedMoveWorker.calculate(
                            price,
                            numberOfShares: numberOfShares,
                            impliedVolatility: impliedVolatility / 100.0)
                    
                    // NOTE: Pass the result to the Presenter
                    
                    var response = ExpectedMove.FetchTicker.Response()
                    response.price = price
                    response.profitLoss = profitLoss
                    self.output.presentProfitLossDaysAhead(response)

                } else {
                    print("Query didn't return a valid price")
                }
            }
            output.setNetworkActivityIndicatorVisible(true)
        }
    }
    
    func autoComplete(request: ExpectedMove.AutoComplete.Request) {

        let ticker = request.ticker

        // NOTE: Ask the Worker to do the work
        
        autoCompleteWorker.stockAutoComplete(ticker) { (stockAutoComplete) in
            self.output.setNetworkActivityIndicatorVisible(false)
            let response = ExpectedMove.AutoComplete.Response(searchTerm: ticker, autoCompleteResults: stockAutoComplete)
            self.output.presentStockAutoComplete(response)
        }
        output.setNetworkActivityIndicatorVisible(true)
    }
}
